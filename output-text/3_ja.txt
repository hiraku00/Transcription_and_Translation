このレッスンでは、Harrisonがランドチェーンの最も重要なキービルディングブロックである「チェーン」を教えます。
チェーンは通常、LOM大型言語モデルをプロンプトと一緒に組み合わせたもので、このビルディングブロックを使えば、テキストや他のデータに対して一連の操作を実行するために、これらのビルディングブロックをたくさん並べることもできるのです。
私は、その世界に飛び込むのが楽しみです。
まずは環境変数を読み込むところから始めましょう。
そして、これから使用するデータもロードします。
このようなチェーンは、一度に多くの入力に対して実行できることが魅力のひとつです。
ここでは、pandasのデータフレームをロードします。
pandasのデータフレームは、さまざまな要素のデータを含むデータ構造です。
pandasに馴染みのない方でも、気にしないでください。
ここで重要なのは、後で使用するデータを読み込むということです。
このpandasのデータフレームの中を見ると、製品列とレビュー列があることがわかります。
これらの行はそれぞれ異なるデータポイントであり、チェーンを通して渡すことができます。
最初に取り上げるチェーンはLOMチェーンです。
このチェーンはシンプルですが、非常に強力なチェーンで、今後説明する多くのチェーンの基礎となるものです。
そこで、3種類のものをインポートします。
OpenAIのモデル、つまりLOMをインポートします。
チャットプロンプトのテンプレートをインポートします。
これがプロンプトです。
そして、LOM チェーンをインポートします。
最初に、使用する言語モデルを初期化します。
チャットOpenAIを高温で初期化することで、楽しい説明を得られるようにします。
プロンプトを初期化します。
このプロンプトはproductという変数を取り込みます。
このプロンプトは、その製品を作っている会社を説明するのに最適な名前を生成するよう、LOMに依頼するものです。
そして最後に、この2つを組み合わせてチェーンにします。
これが、LOMチェーンと呼ばれるものです。
これは非常にシンプルなものです。
LOMとプロンプトを組み合わせただけです。
しかし、このチェーンは、プロンプトからLOMへと順を追って進むことができるのです。
例えば、クイーンサイズのシーツセットという商品があったとして、chain.runを使って、これをチェーンに通すことができます。
これは、プロンプトをフード内でフォーマットし、プロンプト全体をLOMに渡すというものです。
そして、royal beddingsという仮想の会社の名前が返されるのがわかります。
ここで一旦停止して、必要な商品説明を入力し、その結果、チェーンが何を出力するかを確認します。
LOMチェーンは最も基本的なタイプのチェーンで、将来的にたくさん使われることになるでしょう。
次のタイプのチェーンは、シーケンシャル・チェーンです。
逐次連鎖は、連鎖を次々に走らせるものです。
まずは、シンプルなシーケンシャル・チェーンをインポートします。
これは、1つの入力だけを受け取り、1つの出力だけを返すサブチェーンがある場合にうまく機能します。
ここではまず、LOMとプロンプトを使用したチェーンを1つ作成します。
このプロンプトは製品を入力し、その会社を表現するのに最適な名前を返します。
これが最初のチェーンになります。
次に、2つ目のチェーンを作成します。
2つ目のチェーンでは、会社名を入力し、その会社について20語の説明を出力します。
このようなチェーンを次々に実行し、最初のチェーンの出力である会社名を2番目のチェーンに渡したいということは想像がつくと思います。
このような場合、単純な連鎖を作成することで、簡単に実現することができます。
これをシンプルチェーンと呼ぶことにします。
この連鎖を任意の商品説明に適用することができます。
上の商品「クイーンサイズのシーツセット」を例にとると、まずロイヤルベットを出力することがわかります。
そして、それを2番目のチェーンに渡すと、その会社がどのような会社であるかという説明が出力されます。
単純な連鎖は、入力と出力が1つずつしかない場合にはうまく機能します。
しかし、複数の入力や複数の出力がある場合はどうでしょうか。
そこで、通常の逐次連鎖を使用することで、このようなことが可能になります。
そこで、これをインポートして、たくさんのチェーンを作成し、次々に使っていくことにしましょう。
ここでは、上記のデータ（レビューあり）を使用します。
最初のチェーンでは、レビューを英語に翻訳します。
2つ目のチェーンでは、そのレビューの要約を一文で作成します。
そして、これは以前に生成された英語のレビューを使用します。
3つ目のチェーンは、レビューの言語がそもそも何であったかを検出します。
これは、元のレビューに由来するレビュー変数を使用しています。
そして最後に、4番目のチェーンは複数の入力を取り込みます。
これは、2番目のチェーンで計算したサマリー変数を取り込みます。
そして、3番目のチェーンで計算した言語変数。
そして、指定された言語でのサマリーに対するフォローアップ回答を求めることになります。
これらのサブチェーンについて注意すべき点は、入力キーと出力キーがかなり正確である必要があるということです。
そこで、ここではレビューを取り込んでいます。
これは開始時に渡される変数です。
出力キーに英語のreviewを明示的に設定していることがわかります。
これは次のプロンプトで、同じ変数名でEnglish reviewを取り込むときに使われます。
そして、この連鎖の出力キーをsummaryに設定していますが、これは最後の連鎖で使用されることがわかります。
3番目のプロンプトでは、元の変数と出力であるslingwageをレビューに取り込み、これも最後のプロンプトで使われます。
このように、変数名を正確に並べることはとても重要です。
また、もしキーエラーが発生した場合は、それらが並んでいるかどうかを必ず確認する必要があります。
このように、単純な連鎖が複数の連鎖になり、それぞれが1つの入力と1つの出力を持つようになります。
これを視覚的に表現するために、スライドを見ると、ある連鎖が他の連鎖を次々と取り込んでいるのがわかりますね。
ここでは、この連続したチェーンの視覚的な説明を見ることができます。
上の連鎖のように、連鎖のどのステップでも複数の入力変数を取り込むことができることに気づくでしょう。
これは、より複雑な下流の連鎖があり、複数の前の連鎖の合成である必要がある場合に便利です。
さて、このようにすべての連鎖が揃ったので、順次連鎖の中で簡単に組み合わせることができます。
ここで、作成した4つのチェーンをチェーンの変数に渡すと、レビューという1つの人間の入力を持つinputs変数が作成されることがお分かりいただけるでしょう。
そして、英語のレビュー、要約、フォローアップ・メッセージといった中間出力をすべて返すようにします。
では、これをいくつかのデータに対して実行してみましょう。
レビュー」を選択し、全体的なチェーンを通してそれを渡してみましょう。
元のレビューがフランス語であることがわかります。
英語のレビューが翻訳されたものであることがわかります。
レビューの要約が表示され、元の言語であるフランス語のフォローアップメッセージが表示されます。
ここでビデオを一時停止して、いろいろな入力を試してみてください。
ここまで、LLMチェーン、そしてシーケンシャルチェーンについて説明しました。
しかし、もっと複雑なことをしたい場合はどうすればいいのでしょうか？よくあることですが、基本的な操作として、入力が何であるかに応じて、入力をチェーンにルーティングすることがあります。
例えば、複数のサブチェーンがあり、それぞれが特定の種類の入力に特化している場合、まずどのサブチェーンに入力を渡すかを決定し、そのチェーンに入力を渡すルーターチェーンを持つことができます。
具体的な例として、入ってきそうなテーマによって、異なるタイプのチェーン間をルーティングしているところを見てみましょう。
ここには異なるプロンプトがあるわけです。
1つのプロンプトは、物理の質問に答えるのに適しています。
2番目のプロンプトは数学の質問に答えるのに適しており、3番目は歴史、そして4番目はコンピュータサイエンスの質問に答えるのに適しています。
これらのプロンプトのテンプレートをすべて定義してみましょう。
これらのプロンプトテンプレートを用意したら、さらに情報を提供することができます。
それぞれのテンプレートに名前を付け、説明を付けます。
物理のテンプレートは、物理に関する質問に答えるためのものです。
この情報はルーターチェーンに渡され、ルーターチェーンはこのサブチェーンをいつ使うか決めることができます。
それでは、必要な他のタイプのチェーンをインポートしてみましょう。
ここでは、マルチプロンプトチェーンが必要です。
これは、複数の異なるプロンプト・テンプレート間でルーティングするときに使用される特定のタイプのチェーンです。
ご覧のように、私たちが持っているオプションはすべてプロンプトテンプレートそのものです。
しかし、これはルーティングできるものの1つのタイプに過ぎません。
どのようなタイプのチェーン間でもルーティングできます。
ここで実装する他のクラスは、LLMルーター・チェーンです。
これは言語モデルそのものを使って、異なるサブチェーン間をルーティングします。
ここでは、上で用意した説明と名前が使われることになります。
また、ルーター出力パーサーをインポートします。
これはLLMの出力を解析して辞書にし、下流でどのチェーンを使うか、そのチェーンへの入力はどうあるべきかを決定するために使用することができます。
さて、いよいよこれを使うことにしましょう。
まず、使用する言語モデルをインポートして定義しましょう。
次に、デスティネーションチェーンを作成します。
これはルーターチェーンから呼び出されるチェーンです。
見ての通り、各デスティネーションチェーン自体が言語モデルチェーンであり、LLMチェーンである。
デスティネーションチェーンの他に、デフォルトチェーンも必要です。
これは、ルーターがどのサブチェーンを使うか決められないときに呼び出されるチェーンです。
上の例では、入力された質問が物理、数学、歴史、コンピュータサイエンスとは無関係な場合に呼び出されることがあります。
次に、LLMが異なるチェーン間をルーティングするために使用するテンプレートを定義します。
このテンプレートには、実行すべきタスクの指示と、出力されるべき特定のフォーマットが含まれています。
ルーター・チェーンを構築するために、これらのピースをいくつか組み合わせてみましょう。
まず、ルーターテンプレートを作成し、上記で定義した目的地と一緒にフォーマットします。
このテンプレートは、さまざまなタイプの宛先に対して柔軟に対応できます。
ここでできることのひとつは、一時停止して、さまざまなタイプの目的地を追加することです。
物理、数学、歴史、コンピュータサイエンスだけでなく、英語やラテン語など、別の科目を追加することもできます。
次に、このテンプレートからプロンプト・テンプレートを作成し、LLMと全体的なルーター・プロンプトを渡して、ルーター・チェーンを作成します。
ここで、ルーター出力パーサーを用意していることに注意してください。
これは、このチェーンがどのサブチェーン間をルーティングするかを決めるのに役立つので重要である。
そして最後に、すべてをまとめて、全体的なチェーンを作成することができます。
このチェーンにはルーターチェーンがあり、ここで定義されています。
デスティネーション・チェーンには、ここで指定したチェーンがあり、さらにデフォルト・チェーンも指定されています。
これで、このチェーンを使うことができます。
では、いくつか質問をしてみましょう。
物理に関する質問をすると、うまくいけば物理チェーンにルーティングされ、黒体放射とは何かという入力があり、それが下のチェーンに渡されることがわかります。
ここでビデオを一時停止して、別の入力を入れてみてください。
上記で定義した他のすべての種類の特殊連鎖を試すことができます。
例えば、数学の質問をすると、数学のチェーンにルーティングされ、そのチェーンに渡されるのがわかるはずです。
また、どのサブチェーンにも関連しない質問を渡した場合の様子も見てみましょう。
ここでは生物学に関する質問をしていますが、選択されたチェーンは「none」であることが確認できます。
これは、デフォルトのチェーンに渡されることを意味し、それ自体は言語モデルへの一般的な呼び出しに過ぎない。
言語モデルは幸いにも生物学について詳しいので、私たちを助けてくれるでしょう。
さて、基本的な構成要素であるチェーンの種類について説明しましたが、これらを組み合わせて、実に興味深いアプリケーションを作り始めることができます。
例えば、次のセクションでは、文書に対して質問応答を行うチェーンを作成する方法を説明します。
